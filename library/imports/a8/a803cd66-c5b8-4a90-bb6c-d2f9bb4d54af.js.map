{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Game.js"],"names":["cc","Class","extends","Component","onLoad","groundY","ground","y","height","spawnNewStar","score","timer","starDuration","newStar","instantiate","starPrefab","node","addChild","setPosition","getNewStarPosition","getComponent","game","minStarDuration","random0To1","maxStarDuration","randX","randY","player","jumpHeight","maxX","width","randomMinus1To1","p","properties","default","type","Prefab","Node","scoreDisplay","Label","scoreAudio","url","AudioClip","gainScore","string","toString","audioEngine","playEffect","update","dt","gameOver","stopAllActions","director","loadScene","start"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    onLoad: function () {\r\n        // 获取地平面的 y 轴坐标\r\n        this.groundY = this.ground.y + this.ground.height/2;\r\n        // 生成一个新的星星\r\n        this.spawnNewStar();\r\n        this.score = 0;\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n        // 生成一个新的星星\r\n        this.spawnNewStar();\r\n        // 初始化计分\r\n        this.score = 0;\r\n    },\r\n// Game.js\r\n\r\n    spawnNewStar: function() {\r\n        // 使用给定的模板在场景中生成一个新节点\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        // 将新增的节点添加到 Canvas 节点下面\r\n        this.node.addChild(newStar);\r\n        // 为星星设置一个随机位置\r\n        newStar.setPosition(this.getNewStarPosition());\r\n        // 将 Game 组件的实例传入星星组件\r\n        newStar.getComponent('Star').game = this;\r\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\r\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\r\n        var maxX = this.node.width/2;\r\n        randX = cc.randomMinus1To1() * maxX;\r\n        // 返回星星坐标\r\n        return cc.p(randX, randY);\r\n    },\r\n    properties: {\r\n         // 这个属性引用了星星预制资源\r\n         starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n            \r\n        },\r\n\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n        // 地面节点，用于确定星星生成的高度\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        scoreAudio: {\r\n            default: null,\r\n            url: cc.AudioClip\r\n        },\r\n        scoreAudio: {\r\n            default: null,\r\n            url: cc.AudioClip\r\n        }\r\n    },\r\n        gainScore: function () {\r\n            this.score += 1;\r\n            // 更新 scoreDisplay Label 的文字\r\n            this.scoreDisplay.string = 'Score: ' + this.score.toString();\r\n            cc.audioEngine.playEffect(this.scoreAudio, false);\r\n        },\r\n        update: function (dt) {\r\n            // 每帧更新计时器，超过限度还没有生成新的星星\r\n            // 就会调用游戏失败逻辑\r\n            if (this.timer > this.starDuration) {\r\n                this.gameOver();\r\n                return;\r\n            }\r\n            this.timer += dt;\r\n        },\r\n        gameOver: function () {\r\n            this.player.stopAllActions(); //停止 player 节点的跳跃动作\r\n            cc.director.loadScene('game');\r\n        },\r\n   // 星星产生后消失时间的随机范围\r\n       \r\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\r\n      // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    \r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    // update (dt) {},\r\n    // Game.js\r\n    start () {\r\n\r\n    },\r\n       \r\n       \r\n    // Game.js\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // 更新 scoreDisplay Label 的文字\r\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\r\n        // 播放得分音效\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n\r\n  \r\n});\r\n"]}